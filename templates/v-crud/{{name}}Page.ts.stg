import "fbsgen/base"
import "fbsgen/dict"

p_block(p, module) ::= <<
«p_main_block(p, module, module.w.v.(p.("name")).val, p.("dir_name"), module.w.vfmt.("UC"), module.w.vfmt.("UC&&_==-"))»
>>

p_main_block(p, module, name, module_name, nameUC, nameKC) ::= <<
import { component } from 'vuets'
import { $any, defp } from 'coreds/lib/util'
import { Pager, PagerState, SelectionFlags, PojoSO, PojoState } from 'coreds/lib/types'
import { PojoStore } from 'coreds/lib/pstore/'
import { mergeFrom } from 'coreds/lib/diff'
import { ParamRangeKey } from 'coreds/lib/prk'
import * as form from 'coreds/lib/form'
import * as ui from 'coreds-spectre/lib/ui/'
import { PAGE_SIZE, MULTIPLIER, addInstance } from '../../src/util'
import { stores } from '../../src/context'
import { qd, QForm } from '../../g/«module_name»/«name»QForm'
import { «name»New, «name»Update } from './«name»Forms'
import { «module_name» } from '../../g/«module_name»/'
const $ = «module_name».«name»

const V = /**/`
<div class="column col-xs-12 col-sm-12 col-md-6 col-lg-4 col-xl-4 col-3" v-pager="pager">
  <header class="navbar">
    <section class="navbar-section">
      <input class="underline" type="text" placeholder="«name»" ${ui.lsearch_attrs($.$.title)} />
    </section>
    <section class="navbar-section">
      <div class="dropdown dropdown-right">
        <a class="btn btn-link btn-sm" v-toggle:click,1,ff="'1'"><i class="icon plus"></i></a>
        <ul class="menu form">
          <li :class="'menu-item' + ((${PagerState.LOADING} & pager.state) ? ' has-loading' : '')">
            <«name»New ref="fnew" :pager="pager" />
          </li>
        </ul>
      </div>
      <div class="dropdown dropdown-right">
        <a class="btn btn-link btn-sm" v-toggle:click,1="'1'"><i class="icon filter"></i></a>
        <ul class="menu fitted">
          <li class="menu-item">
            ${ui.qform(qd)}
          </li>
        </ul>
      </div>
    </section>
  </header>
  ${ui.pager_controls_nav}
  ${ui.pager_msg}
  <ul ${ui.list_attrs}>
    <ItemV v-for="pojo of pager.array" :pojo="pojo" @toggle="toggle" @action="action" />
    <li class="d-none">
      <div id="«nameKC»-detail" class="detail">
        <hr />
        <«name»Update ref="fupdate" :pager="pager" :pojo="pupdate" />
      </div>
    </li>
  </ul>
</div>
`/**/

const ItemV = /**/`
<li ${ui.item_attrs}>
  <div class="float-left">${ui.item_msg_dd}</div>
  ${ui.item_remove32_dd}
  ${ui.item_toggle_dd($.$.completed, 64, 'circle', $.$d[$.$.completed].$n)}
  <div class="content right floated">
    <small class="chip bg-secondary">{{ pojo.$d['${$.$.type}'].$fn(pojo['${$.$.type}']) }}</small>
  </div>
  ${ui.icon_timeago('content left floated timeago')}
  <div class="clearfix"></div>
  <div class="content dd">
    <span :class="pojo['${$.$.completed}'] ? 'completed' : ''">{{ pojo['${$.$.title}'] }}</span>
  </div>
  ${ui.item_detail('«nameKC»-detail')}
</li>
`/**/

function newItem() {
    return $.$new('')
}

export class «name»Page {
    pstore: PojoStore<«module_name».«name»>
    pager: Pager = $any(null)
    qform = new QForm()
    
    pupdate = form.initObservable($.$new0(), $.$d)
    
    static created(self: «name»Page) {
        let pstore = stores.«nameUC» = defp(self, 'pstore', new PojoStore([], {
            desc: true,
            pageSize: PAGE_SIZE,
            multiplier: MULTIPLIER,
            descriptor: $.$d,
            createObservable: newItem,
            fetch: self.fetch,
            onSelect: self.onSelect
        }))
        QForm.init(self.qform, self, {
            pager: pstore.pager, 
            cbSuccess: self.fetch$$S, 
            cbFailed: self.fetch$$F,
            list: (prk: ParamRangeKey) => $.ForUser.list(prk)
        })
        self.pager = pstore.pager
    }
    static mounted(self: «name»Page) {
        // copy form field ref
        let refs = self['$refs']
        refs.ff = refs.fnew.$refs.ff
        addInstance(self)
    }
    init() {
        this.pstore.requestNewer()
    }
    fetch$$S(data) {
        this.pstore.cbFetchSuccess(data['1'])
    }
    fetch$$F(err) {
        this.pstore.cbFetchFailed(err)
    }
    fetch(prk: ParamRangeKey, pager: Pager) {
        return this.qform.send(prk)
    }
    onSelect(selected: «module_name».«name», flags: SelectionFlags) {
        if (!(flags & SelectionFlags.CLICKED_UPDATE))
            return 0
        
        let selected_ = selected['_'] as PojoSO,
            state = selected_.state,
            pupdate = this.pupdate,
            pupdate_: PojoSO,
            original
        
        if ((flags & SelectionFlags.REFRESH)) {
            if (!(state & PojoState.UPDATE))
                return 0
        } else if (!(state & PojoState.UPDATE)) {
            selected_.state = state | PojoState.UPDATE
            if (selected['1'] === pupdate['1'])
                return 0
        } else if (selected['1'] === pupdate['1']) {
            selected_.state = state ^ PojoState.UPDATE
            return 0
        }
        
        pupdate_ = pupdate['_'] as PojoSO
        original = this.pstore.getOriginal(selected)
        
        mergeFrom(original, selected['$d'], pupdate)
        if (pupdate_.msg)
            pupdate_.msg = ''
        
        return 0
    }
    
    remove$$S(data) {
        let pager = this.pager
        
        this.pupdate['_'].state ^= PojoState.LOADING
        form.$toggle_success(pager, null, true, '')
        
        this.pstore.remove(this.pstore.getStoreIndex(pager.pojo))
    }
    remove$$F(err) {
        this.pupdate['_'].state ^= PojoState.LOADING
        form.$toggle_failed(this.pager, err)
    }
    action(bit: number) {
        if (bit !== 32 || !form.$toggle_prepare(this.pager))
            return
        
        this.pupdate['_'].state |= PojoState.LOADING
        $.ForUser.del({ '1': this.pager.pojo['1'] })
            .then(this.remove$$S).then(undefined, this.remove$$F)
    }
    
    toggle$$S(data) {
        this.pupdate['_'].state ^= PojoState.LOADING
        form.$toggle_success(this.pager, this.pupdate)
    }
    toggle$$F(err) {
        this.pupdate['_'].state ^= PojoState.LOADING
        form.$toggle_failed(this.pager, err)
    }
    toggle(fk: string, changed?: boolean) {
        let pager = this.pager,
            pojo = pager.pojo,
            mc = form.$toggle(pager, fk, pojo, changed)
        
        if (!mc)
            return
        
        this.pupdate['_'].state |= PojoState.LOADING
        $.ForUser.update(form.$update_req(pojo['1'] as string, mc))
            .then(this.toggle$$S).then(undefined, this.toggle$$F)
    }
}
export const «name»PageV = component({
    created(this: «name»Page) { «name»Page.created(this) },
    mounted(this: «name»Page) { «name»Page.mounted(this) },
    template: V,
    components: {
        «name»New,
        «name»Update,
        ItemV: {
            name: 'ItemV', template: ItemV, data() { return {} },
            props: {
                pojo: { type: Object, required: true } 
            }
        }
    }
}, «name»Page)

>>
