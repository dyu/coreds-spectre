import "fbsgen/base"
import "fbsgen/dict"

p_block(p, module) ::= <<
«p_main_block(p, module, module.w.v.(p.("name")).val, p.("dir_name"), module.w.vfmt.("UC"), module.w.vfmt.("UC&&_==-"))»
>>

p_main_block(p, module, name, module_name, nameUC, nameKC) ::= <<
import { PojoState, PagerState } from 'coreds/lib/types'
import { bindPrototypeTo, proxy } from 'coreds/lib/proxy'
import { PojoStore } from 'coreds/lib/pstore/'
import { FormFlags } from 'coreds-spectre/lib/util'
import * as form from 'coreds/lib/form'
import * as ui from 'coreds-spectre/lib/uitx/'
import { «module_name» } from '../../g/«module_name»/'
const $ = «module_name».«name»

export class «name»New {
    $fns = bindPrototypeTo(this, «name»New.prototype)
    pojo = proxy(form.initObservable($.$new0(), $.$d))
    ff = null as any
    
    constructor(public pstore?: PojoStore<«module_name».«name»>) {
        
    }
    focus() {
        let ff = this.ff
        ff && ff.focus()
    }
    pojo$$S(data) {
        let pstore = this.pstore
        if (pstore) {
            pstore.pager.state ^= PagerState.LOADING
            pstore.addAll(data['1'], true, true)
        }
        form.$success(this.pojo)
        this.focus()
    }
    pojo$$F(err) {
        let pstore = this.pstore
        if (pstore) {
            pstore.pager.state ^= PagerState.LOADING
        }
        
        form.$failed(this.pojo, err)
    }
    pojo$$() {
        let pojo = this.pojo,
            pstore = this.pstore,
            lastSeen
        
        if ((pstore && (PagerState.LOADING & pstore.pager.state)) || !form.$prepare(pojo))
            return
        
        if (pstore) {
            pstore.pager.state |= PagerState.LOADING
        }
        
        pojo['1'] = pstore && (lastSeen = pstore.getLastSeenObj()) && lastSeen['1']
        
        $.ForUser.create(pojo)
            .then(this.$fns.pojo$$S).then(undefined, this.$fns.pojo$$F)
    }
    
    static V = (instance: «name»New) => ui.form(
        instance.pojo, $.$d, instance.$fns.pojo$$, 'ff', instance, FormFlags.PLACEHOLDER)
}

export class «name»Update {
    fns = bindPrototypeTo(this, «name»Update.prototype)
    
    constructor(public pojo: «module_name».«name», public pstore: PojoStore<«module_name».«name»>) {
        
    }
    
    pojo$$S(data) {
        let pstore = this.pstore,
            pager = pstore.pager,
            selected = pager.pojo as «module_name».«name»,
            original = pstore.getOriginal(selected)
        
        selected['_'].state ^= PojoState.LOADING
        form.$update_success(this.pojo, pager, original, selected)
    }
    pojo$$F(err) {
        let pager = this.pstore.pager
        
        pager.pojo['_'].state ^= PojoState.LOADING
        form.$update_failed(this.pojo, pager, err)
    }
    pojo$$() {
        let pstore = this.pstore,
            pager = pstore.pager,
            selected = pager.pojo as «module_name».«name»,
            original = pstore.getOriginal(selected),
            mc = form.$update(this.pojo, pager, original)
        
        if (!mc)
            return
        
        selected['_'].state |= PojoState.LOADING
        $.ForUser.update(form.$update_req(original['1'] as string, mc))
            .then(this.fns.pojo$$S).then(undefined, this.fns.pojo$$F)
    }

    static V = (instance: «name»Update) => ui.form(
        instance.pojo, $.$d, instance.fns.pojo$$, null)
}
>>
