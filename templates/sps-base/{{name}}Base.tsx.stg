import "fbsgen/base"
import "fbsgen/dict"

p_block(p, module) ::= <<
«p_main_block(p, module, module.w.v.(p.("name")).val, p.("dir_name"), module.w.vfmt.("UC"), module.w.vfmt.("UC&&_==-"))»
>>

p_main_block(p, module, name, module_name, nameUC, nameKC) ::= <<
import * as Surplus from 'surplus'; Surplus;
import { observable } from 'sobx'
import { $any } from 'coreds/lib/util'
import { Pager, SelectionFlags, PojoSO, PojoState } from 'coreds/lib/types'
import { PojoStore } from 'coreds/lib/pstore/'
import { mergeFrom } from 'coreds/lib/diff'
import { ParamRangeKey } from 'coreds/lib/prk'
import * as form from 'coreds/lib/form'
import * as ui from 'coreds-spectre/lib/uix/'
import { PAGE_SIZE, MULTIPLIER } from '../../src/util'
import { «name»Update } from './«name»Forms'
import { «module_name» } from '../../g/«module_name»/'
const $ = «module_name».«name»

const V = ({instance}: {instance: «name»Base}) =>
<ul class={ui.list_class(instance.pager)}>
  {instance.items.map(pojo => ui.$item(pojo, <ItemV pojo={pojo} instance={instance} />) )}
  <li class="d-none">
    <div id={instance.detail_id} class="detail">
      <hr />
      <«name»Update.V instance={instance.fupdate} />
    </div>
  </li>
</ul>

const ItemV = ({pojo, instance}:{pojo: «module_name».«name», instance: «name»Base}) =>
<li class={ui.item_class(pojo)}>
  <div class="float-left">{ui.item_msg_dd(pojo)}</div>
  {ui.item_remove32_dd(pojo, instance.actionRemove)}
  {ui.item_toggle_dd(pojo, $.$.completed, 64, 'circle', instance.toggleCompleted, $.$d[$.$.completed].$n)}
  <div class="content right floated">
    <small class="chip bg-secondary">{$.Type$$str(pojo[$.$.type]!)}</small>
  </div>
  {ui.icon_timeago(pojo, 'content left floated timeago')}
  <div class="clearfix"></div>
  <div class="content dd">
    <span class={$any(pojo[$.$.completed] ? 'completed' : '')}>{$any(pojo[$.$.title])}</span>
  </div>
  {ui.item_detail(pojo, instance.detail_id)}
</li>

export function newItem() {
    return $.$new('')
}

export abstract class «name»Base {
    pstore = new PojoStore([], {
        desc: true,
        pageSize: PAGE_SIZE,
        multiplier: MULTIPLIER,
        descriptor: $.$d,
        createObservable: newItem,
        onSelect: this.onSelect.bind(this),
        fetch: this.fetch.bind(this)
    })
    pager = observable(this.pstore.pager)
    items = this.pager.array.map(observable)
    
    pupdate = observable(form.initObservable($.$new0(), $.$d))
    fupdate = new «name»Update(this.pupdate, this.pstore)
    
    constructor(public detail_id: string) {
        
    }
    
    abstract fetch(prk: ParamRangeKey, pager: Pager): any
    fetch$$S(data) {
        this.pstore.cbFetchSuccess(data['1'])
    }
    fetch$$F(err) {
        this.pstore.cbFetchFailed(err)
    }
    onSelect(selected: «module_name».«name», flags: SelectionFlags) {
        if (!(flags & SelectionFlags.CLICKED_UPDATE))
            return 0
        
        let selected_ = selected['_'] as PojoSO,
            state = selected_.state,
            pupdate = this.pupdate,
            pupdate_: PojoSO,
            original
        
        if ((flags & SelectionFlags.REFRESH)) {
            if (!(state & PojoState.UPDATE))
                return 0
        } else if (!(state & PojoState.UPDATE)) {
            selected_.state = state | PojoState.UPDATE
            if (selected['1'] === pupdate['1'])
                return 0
        } else if (selected['1'] === pupdate['1']) {
            selected_.state = state ^ PojoState.UPDATE
            return 0
        }
        
        pupdate_ = pupdate['_'] as PojoSO
        original = this.pstore.getOriginal(selected)

        mergeFrom(original, selected['$d'], pupdate)
        if (pupdate_.msg)
            pupdate_.msg = ''
        
        return 0
    }
    
    remove$$S(data) {
        this.pupdate['_'].state ^= PojoState.LOADING
        form.$toggle_success(this.pager, null, true, '')
        
        this.pstore.remove(this.pstore.getStoreIndex(this.pager.pojo))
    }
    remove$$F(err) {
        this.pupdate['_'].state ^= PojoState.LOADING
        form.$toggle_failed(this.pager, err)
    }
    actionRemove() {
        if (!form.$toggle_prepare(this.pager))
            return
        
        this.pupdate['_'].state |= PojoState.LOADING
        $.ForUser.del({ '1': this.pager.pojo['1'] })
            .then(this.remove$$S).then(undefined, this.remove$$F)
    }
    
    toggle$$S(data) {
        this.pupdate['_'].state ^= PojoState.LOADING
        form.$toggle_success(this.pager, this.pupdate)
    }
    toggle$$F(err) {
        this.pupdate['_'].state ^= PojoState.LOADING
        form.$toggle_failed(this.pager, err)
    }
    toggle(fk: string, changed?: boolean) {
        let pager = this.pager,
            pojo = pager.pojo as «module_name».«name»,
            mc = form.$toggle(pager, fk, pojo, changed)
        
        if (!mc)
            return
        
        this.pupdate['_'].state |= PojoState.LOADING
        $.ForUser.update(form.$update_req(pojo['1'] as string, mc))
            .then(this.toggle$$S).then(undefined, this.toggle$$F)
    }
    toggleCompleted() {
        this.toggle($.$.completed)
    }
    
    static V = V
}

>>
